define("_generated/Less/Viva.Controls/Controls/Forms/Viva.MultiLineTextBox.css",["module"],(function(e){"use strict";return{css:".azc-multiLineTextBox{box-sizing:border-box;vertical-align:text-top;overflow:hidden;display:flex}.azc-multiLineTextBox textarea{height:100%;width:100%;display:inline-block;box-sizing:border-box;font-size:13px;resize:none;overflow:auto;margin:0;padding:2px 8px 4px;border-style:solid;border-width:1px}.azc-multiLineTextBox-wrapper{width:100%;line-height:0}",moduleId:e.id}})),
define("Viva.Controls/Controls/Forms/Viva.MultiLineTextBox",["require","exports","Viva.Controls/Controls/Base/Viva.Base","Viva.Controls/Controls/Base/Viva.TypableControl","MsPortalImpl.Controls/Controls/Base/WidgetBindingHandler","FxInternal/Css","MsPortalImpl.Controls/Fields/Base/Field","_generated/Less/Viva.Controls/Controls/Forms/Viva.MultiLineTextBox.css"],(function(e,t,s,o,i,a,l,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Widget=t.ViewModel=t.DefaultRowSize=void 0,(0,a.injectCss)(n);const r="azc-inputbox azc-multiLineTextBox",d="azc-has-focus",c="azc-multiLineTextBox-disabled",h=`<div class='azc-inputbox-wrapper azc-multiLineTextBox-wrapper'><textarea class='azc-textarea azc-formControl azc-input azc-validation-border ${s.autoTooltipClass} msportalfx-font-regular' type='text' data-bind='value: data.value, valueUpdate: data.getValueUpdateTrigger(), disable: $disabled, attr: { name: $ctl._name, placeholder: data.placeholder, rows: data.rows, maxlength: data.maxLength, tabindex: $tabIndex, spellcheck: data.spellcheck().toString() }, css: { "fxs-br-error": data.validationState() === 1, "fxs-br-dirty": data.dirty(), "azc-disabled": $disabled, "azc-br-focused": data.focused() }'></textarea></div>`;let u=0;t.DefaultRowSize=7;class p extends o.ViewModel{constructor(e){super(e),this.rows=e.rows||ko.observable(t.DefaultRowSize),this.placeholder=e.placeholder||ko.observable(null),this.maxLength=e.maxLength||ko.observable(null),this.spellcheck=e.spellcheck||ko.observable(!1)}}t.ViewModel=p;class x extends o.Widget{constructor(e,t,s){(s=s||{}).viewModelType=s.viewModelType||p,super(e,t,s),this.element.addClass(r).html(h).parent().addClass(l.hideCheckClass),this._control=this.element.find("textarea"),this._name=this.options.name||"__azc-multiLineTextBox"+u++,this._attachEvents();const o=this.ltm;ko.computed(o,(()=>{const e=this.$disabled();this.element.toggleClass(c,e),this._control.prop("disabled",e).attr({"aria-disabled":e,readonly:e,"aria-readonly":e})})),ko.computed(o,(()=>{const e=(t=this.options.value(),null!==(s=this.options.maxLength())&&null!=t&&t.length>s?t.slice(0,s):t);var t,s;e!==this.options.value()&&this.options.value(e)})),this._bindDescendants(),this._afterCreate(),this._supportsFocus(!0)}dispose(){var e,t;null===(t=null===(e=null==this?void 0:this.element)||void 0===e?void 0:e.parent())||void 0===t||t.removeClass(l.hideCheckClass),this._checkExistsOrRegisterDestroyId(super.dispose)||(this._cleanElement(r,c),super.dispose())}get options(){return this._options}_getElementToFocus(){return this._control[0]}_attachEvents(){const e=this.options,t=this.element;this.ltm.registerForDispose(t.setEvents(["keydown",t=>{13===t.which&&e.onEnterPressed&&t.shiftKey&&t.preventDefault()}],["keyup",t=>{13===t.which&&e.onEnterPressed&&t.shiftKey&&e.onEnterPressed(this._control.val())}])),this.ltm.registerForDispose(this._control.setEvents(["focus",s=>{e.focused(!0),t.toggleClass(d,!0)}],["blur",s=>{e.focused(!1),t.toggleClass(d,!1)}]))}}t.Widget=x,ko.bindingHandlers.azcMultiLineTextBox=i.getBindingHandler(x)}));