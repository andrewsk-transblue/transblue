define("MsPortalImpl/Auth/RpcHandlers",["require","exports","FxInternal/AsyncLoader","MsPortalImpl/Services/Services.ExtensionTokensManager","MsPortalImpl/Services/Services.SecurityTokens","ShellWorker/AuthorizationState"],(function(e,n,t,o,a,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.getPopTokenEndPoint=n.getNewTokenHandler=n.getAuthorizationTokenEndPoint=void 0;var i=FxImpl.Extension;const s=MsPortalFx.Base.Diagnostics.createLog(e),d=fx.environment.auth.portalClientId;n.getAuthorizationTokenEndPoint=t.defineHandler(i.getAuthorizationTokenEndPoint,(e=>{const n=e.messageArg;return e.diContainer.get(o.ExtensionTokensManager).getSecurityToken({extensionName:e.messageContext.srcWindowId,resourceName:n.resourceName||"",isBackground:n.isBackground,skipCache:n.skipCache,wwwAuthHeader:n.wwwAuthHeader,authConfigStamp:n.authConfigStamp,audience:n.audience,tenantId:n.tenantId})})),n.getNewTokenHandler=t.defineHandler(r.getAuthorizationTokenForShellWorkerEndPoint,(e=>e.diContainer.get(o.ExtensionTokensManager).getSecurityToken({extensionName:e.messageArg.extensionName,resourceName:e.messageArg.resourceName,isBackground:!1,skipCache:!1}).then((e=>e.token)))),n.getPopTokenEndPoint=t.defineHandler(i.getPopTokenEndPoint,(async e=>{var n;const t=e.messageArg;if(!t)return Promise.reject("Incomplete parameters provided when requesting a PoP token.");const o=await MsPortalEarly.extensionAuthMetadataInPortalConfig||{},r=e.messageContext.srcWindowId;let i=null===(n=o[r.toLowerCase()])||void 0===n?void 0:n.oAuthClientId;i||(s.warning(`The extension '${r}' does not have an oAuthClientId specified when requesting a PoP token. The portal's client ID will be used to make this request.`),i=d);const u=Date.now();let c;const g=e.diContainer.get(a.SecurityTokensManager),l=await g.portalAuthHandlerPromise;c=null!==l?await l.acquireTokenForExtension({extensionClientId:i,scopes:t.scopes,popTokenData:t}):await g.getPopToken(Object.assign(Object.assign({},t),{extensionName:r}));let k=0;return c.authHeader&&(k=u+c.expiresInMs),{token:{header:c.authHeader,expiresAt:k},error:c.status,errorMessage:c.errorMessage}}))}));