define("MsPortalImpl.Controls/Controls/Visualization/ChartViewModelConversionHelper",["require","exports"],(function(e,i){"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.ChartViewModelConversionHelper=void 0;var s=MsPortalFx.ViewModels.Controls.Visualization.Chart,t=MsPortalFx.isNullOrUndefined;const r=MsPortalFx.ViewModels.Controls.Visualization.SimpleChart;r.Series,r.ViewModel;function a(e,i,s){void 0!==s&&e.hasOwnProperty(i)&&(ko.isObservable(s)?e[i]=s:e[i](s))}function l(e,i){MsPortalFx.forEachKey(i,((i,s)=>{a(e,i,s)}))}i.ChartViewModelConversionHelper=class{constructor(e,i,s){this.chartViewModel=i,this.simpleChartViewModel=e,this._ltm=s,this._initializeConvertedChartViewModel()}_initializeConvertedChartViewModel(){const e=this.simpleChartViewModel;this.chartViewModel.ariaLabel=e.ariaLabel,this.chartViewModel.ariaDesc=e.ariaDesc,this.chartViewModel.loading=e.loading,this.chartViewModel.noData=e.noData,this.chartViewModel.noDataMessage=e.noDataMessage,this.chartViewModel.showMetrics=e.showMetrics,this.chartViewModel.autogenerateSeriesViews(!1),this.chartViewModel.xAxis.scale(2),this.chartViewModel.yAxis.showGridLines(!0),this._updateSeries();let i=ko.unwrap(e.chartType);i=t(i)?0:i,ko.isObservable(e.chartType)&&e.chartType.subscribe(this._ltm,(e=>{this._updateChartView(e)})),this._updateChartView(i),e.metricsRules&&(this.chartViewModel.metricsRules=e.metricsRules),MsPortalFx.isUndefined(e.legendPosition)||(ko.isObservable(e.legendPosition)?this.chartViewModel.legendPosition=e.legendPosition:this.chartViewModel.legendPosition(e.legendPosition));const s=e.legendWidth;!MsPortalFx.isUndefined(s)&&ko.isObservable(s)&&(this.chartViewModel.legendWidth=s),e.xAxis&&l(this.chartViewModel.xAxis,e.xAxis),e.yAxis&&l(this.chartViewModel.yAxis,e.yAxis),this._setupSeriesSelections(),this._setupSeriesSelectionsCallback()}_updateSeriesSelections(){const e=this.chartViewModel._seriesHelpers(),i=this.chartViewModel.seriesSelections().map((i=>{let s="NotFound";const t=this.chartViewModel.views()[i.chartViewIndex()];return i.seriesViewIndex()<t.seriesView().length&&(s=e&&e.getSeriesName(i.chartViewIndex(),i.seriesViewIndex())),{seriesName:s,values:i.chartItems()}}));this.simpleChartViewModel.seriesSelections(i)}_setupSeriesSelections(){if(this.simpleChartViewModel.seriesSelections){const e={};this.chartViewModel.seriesSelections.subscribeArrayBulkChanges(this._ltm,((i,s)=>{const t=this.chartViewModel._seriesHelpers();if(i&&i.length)for(let s=0;s<i.length;s++){const r=i[s],a=this.chartViewModel.views()[r.chartViewIndex()];if(r.seriesViewIndex()<a.seriesView().length){const i=t&&t.getSeriesName(r.chartViewIndex(),r.seriesViewIndex());if(i){e[i]&&e[i].dispose();const s=this._ltm.createChildLifetime();e[i]=s,r.chartItems.subscribeArrayBulkChanges(s,((e,i)=>{r.chartItems().length&&this._updateSeriesSelections()}))}}}if(s&&s.length)for(let i=0;i<s.length;i++){const r=s[i],a=this.chartViewModel.views()[r.chartViewIndex()];if(r.seriesViewIndex()<a.seriesView().length){const i=t&&t.getSeriesName(r.chartViewIndex(),r.seriesViewIndex());i&&e[i]&&(e[i].dispose(),delete e[i])}}this._updateSeriesSelections()}))}}_setupSeriesSelectionsCallback(){const e=this.simpleChartViewModel;if(e.seriesSelectionsCallback){const i=e=>{const i=this.chartViewModel._seriesHelpers(),s=(e||[]).map((e=>{const s=i&&i.getSeriesviewIndex(0,e.seriesName)||0;return{chartViewIndex:ko.observable(0),seriesViewIndex:ko.observable(s),chartItems:ko.observableArray(e.values)}}));return this.chartViewModel.seriesSelections(s),Q()},s=this.chartViewModel._seriesHelpers;if(s())e.seriesSelectionsCallback(i);else{const t=this._ltm.createChildLifetime();s.subscribe(t,(s=>{s&&(e.seriesSelectionsCallback(i),t.dispose())}))}}}_updateSeries(){this.simpleChartViewModel.series.mapInto(this._ltm,((e,i)=>{const t=new s.Series;return a(t,"name",i.name),a(t,"values",i.values),t}),this.chartViewModel.series)}_updateChartView(e){const i=this._getChartView(e);this.chartViewModel.views([i])}_getChartView(e){let i;this._convertedChartViewLifetimeManager&&this._convertedChartViewLifetimeManager.dispose(),this._convertedChartViewLifetimeManager=this._ltm.createChildLifetime();const t=this.simpleChartViewModel,r=t.events;switch(e){case 3:case 4:case 5:{const a=3===e?0:4===e?1:2;i=new s.BarChartView(a),t.enableSparseSeries&&(i.enableSparseSeries=t.enableSparseSeries),t.barPaddingRatio&&(i.barPaddingRatio=t.barPaddingRatio),t.xAxisSpan&&(i.xAxisSpan=t.xAxisSpan),r&&r.pointClick&&(i.events.barClick=e=>{r.pointClick(e)});break}case 1:i=new s.AreaChartView;break;case 6:i=new s.StackedAreaChartView,t.enableSparseSeries&&(i.enableSparseSeries=t.enableSparseSeries),t.lineState&&(i.lineState=t.lineState);break;case 2:i=new s.ScatterChartView,r&&r.pointClick&&(i.events.pointClick=e=>{r.pointClick(e)});break;default:i=new s.LineChartView}return r&&(r.plotAreaClick&&(this.chartViewModel.events.plotAreaClick=(e,i,s,t)=>{r.plotAreaClick(e,i,s,t)}),0!==e&&1!==e&&6!==e||r.pointClick&&(i.events.pointClick=e=>{r.pointClick(e)},i.events.seriesClick=e=>{r.pointClick(e)})),this.simpleChartViewModel.series.mapInto(this._convertedChartViewLifetimeManager,((i,t)=>{let r;switch(e){case 3:case 4:case 5:r=new s.SeriesView;break;case 1:r=new s.AreaChartSeriesView;break;case 6:r=new s.StackedAreaChartSeriesView;break;case 2:r=new s.ScatterChartSeriesView;break;default:r=new s.LineChartSeriesView}a(r,"seriesName",t.name);const n=t.viewOptions;return n&&(ko.isObservable(n)?n.subscribeAndRun(this._convertedChartViewLifetimeManager,(e=>{l(r,n())})):l(r,n)),r}),i.seriesView),i}}}));