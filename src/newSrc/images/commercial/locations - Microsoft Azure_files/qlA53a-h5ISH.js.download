define("_generated/Less/MsPortalImpl.Controls/Controls/IFrameV2.css",["module"],(function(e){"use strict";return{css:".fxc-iframe{height:100%;overflow-y:hidden}.fxc-iframe-window{width:100%;height:100%}.fxs-blade-appblade .fxc-iframe-window{min-height:calc(100vh - 40px)}@media(min-height:500px){.fxs-blade-appblade .fxc-iframe-window{min-height:initial}}",moduleId:e.id}})),
define("MsPortalImpl.Controls/Controls/IFrameV2",["require","exports","MsPortalImpl.Controls/Controls/Base/OptionsBase","MsPortalImpl/Base/Base.ImplUtils","FxInternal/Css","_generated/Less/MsPortalImpl.Controls/Controls/IFrameV2.css"],(function(e,t,s,r,a,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Widget=t.waitForReadyTimeout=void 0,(0,a.injectCss)(o);var i=MsPortalFx.Base;const n=window,l="fxc-iframe";t.waitForReadyTimeout=3e4;class d extends s.Widget{constructor(s,a,o){super(s,a,o);const d="_msPortalFxPostMessageCallback"in a,c=new i.UriBuilder(a.src);let m;d?(c.query.setParameter("trustedAuthority",n.fx.environment.trustedParentOrigin),m=c.toString()):(c.query.setParameter("trustedAuthority","trustedAuthorityPlaceHolder"),m=c.toString().replace("trustedAuthorityPlaceHolder",n.fx.environment.trustedParentOrigin));const u=c.getAuthority();let p=c.getSchemeAndAuthority();MsPortalFx.startsWith(p,"//")&&(p=location.protocol+p);const g=$(FxImpl.createElement("iframe")).addClass("fxc-iframe-window").attr({src:m,scrolling:"auto",frameborder:"0",sandbox:"allow-same-origin allow-scripts allow-popups allow-modals allow-forms allow-downloads",allow:"microphone *; encrypted-media *;clipboard-read;",role:"presentation"});let h;s.addClass(l).append(g);let f=[];const x=e=>{h.postMessage(e,p)};let w=setTimeout((()=>{FxImpl.Diagnostics.getStatusCode(m,((t,a,o)=>{(0,r.logToExtension)(e,s,2,"A 'ready' message is expected but not received by IFrameV2 control. IFrame should post the 'ready' message to indicate that the IFrame HTML page has loaded and an 'onMessage' handler has been installed to receive subsequent messages. Details: Load failure for uri = {0}, statusCode = {1}, statusText = {2}".format(m,t,o),{diContainer:this._diContainer})})),w=null}),t.waitForReadyTimeout);const y=()=>{w&&(clearTimeout(w),w=null)};this.ltm.registerForDispose({dispose:()=>{y()}});const F=e=>{if(e.origin!==p){if(new i.UriBuilder(e.origin).getAuthority()!==u)return;p=e.origin}if(!(e.source===(h||g[0].contentWindow)))return;const t=e.data||{};let s;if(t.data||t.kind||(s="This message does not have data or kind. You must specify at least one."),["FxAppBlade","FxFramePart","FxFrameControl","FxFrameBlade","pcIframe"].includes(t.signature)||(s="Received unexpected message during iframe blade load: "+t.signature),s&&!function(e){try{return"string"==typeof e&&(e=JSON.parse(e)),!e.signature}catch(e){}return!1}(t))throw this.dispose(),new Error(s+" Disposing the iframe immediately: "+p);d?("ready"===t.kind&&(y(),h||(h=e.source),a._msPortalFxPostMessageCallback(x)),t.data&&a.onReceiveMessage(t.data)):("ready"===t.kind&&(y(),h||(h=e.source),f&&f.forEach(x),f=null),a.receiveMessage(t))};n.addEventListener("message",F,!1),this.ltm.registerForDispose((()=>{n.removeEventListener("message",F,!1)})),d||(a.postMessage.subscribeAndRun(this.ltm,(e=>{f?f.push(e):x(e)})),a.controlIsReady(!0)),this._bindDescendants()}dispose(){this._cleanElement(l),super.dispose()}}t.Widget=d}));